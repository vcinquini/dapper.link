<?xml version="1.0"?>
<doc>
	<assembly>
		<name>Dapper.Common</name>
	</assembly>
	<members>
		<member name="T:Dapper.Attributes.ColumnAttribute">
			<summary>
				Field mapping
			</summary>
		</member>
		<member name="M:Dapper.Attributes.ColumnAttribute.#ctor(System.String)">
			<summary>
				attribute field mapping
			</summary>
			<param name="name">Database field name</param>
		</member>
		<member name="T:Dapper.Attributes.ComplexTypeAttribute">
			<summary>
				Calculated column, if one of the fields is a calculated column, it will not be processed when adding and modifying
			</summary>
		</member>
		<member name="T:Dapper.Attributes.ConcurrencyCheckAttribute">
			<summary>
				Concurrency check, if the field attribute is of type number, use timestamp, otherwise use GUID
			</summary>
		</member>
		<member name="T:Dapper.Attributes.DefaultAttribute">
			<summary>
				default constraint
			</summary>
		</member>
		<member name="T:Dapper.Attributes.FunctionAttribute">
			<summary>
				Database function identifier
			</summary>
		</member>
		<member name="T:Dapper.Attributes.IdentityAttribute">
			<summary>
				Self-incrementing column ID
			</summary>
		</member>
		<member name="T:Dapper.Attributes.NotMappedAttribute">
			<summary>
				ignore mapping
			</summary>
		</member>
		<member name="T:Dapper.Attributes.PrimaryKeyAttribute">
			<summary>
				primary key constraint
			</summary>
		</member>
		<member name="T:Dapper.Attributes.TableAttribute">
			<summary>
				table name mapping
			</summary>
		</member>
		<member name="T:Dapper.IDbContext">
			<summary>
				database context
			</summary>
		</member>
		<member name="E:Dapper.IDbContext.Logging">
			<summary>
				log processing
			</summary>
		</member>
		<member name="P:Dapper.IDbContext.Connection">
			<summary>
				Database linkage
			</summary>
		</member>
		<member name="P:Dapper.IDbContext.DbContextType">
			<summary>
				database context type
			</summary>
		</member>
		<member name="M:Dapper.IDbContext.From``1(System.String,``0)">
			<summary>
				get an xml executor
			</summary>
			<typeparam name="T">Parameter type</typeparam>
			<param name="id">command id</param>
			<param name="parameter">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.From(System.String)">
			<summary>
				get an xml executor
			</summary>
			<param name="id">command id</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.From``1">
			<summary>
				get a linq executor
			</summary>
			<typeparam name="T"></typeparam>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.BeginTransaction">
			<summary>
				Open transaction session
			</summary>
		</member>
		<member name="M:Dapper.IDbContext.BeginTransactionAsync">
			<summary>
				Asynchronously open a transaction session
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.BeginTransaction(System.Data.IsolationLevel)">
			<summary>
				Open transaction session
			</summary>
			<param name="level">Transaction isolation level</param>
		</member>
		<member name="M:Dapper.IDbContext.BeginTransactionAsync(System.Data.IsolationLevel)">
			<summary>
				Asynchronously open a transaction session
			</summary>
			<param name="level"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.Close">
			<summary>
				Close connections and transactions
			</summary>
		</member>
		<member name="M:Dapper.IDbContext.CommitTransaction">
			<summary>
				Commit the current transaction session
			</summary>
		</member>
		<member name="M:Dapper.IDbContext.QueryMultiple(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Execute a multi-result set query and return IMultiResult
			</summary>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.Query(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Execute a single result set query and return a result set of dynamic type
			</summary>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.QueryAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Asynchronously executes a single result set query and returns a result set of dynamic type
			</summary>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.Query``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Execute a single result set query and return a result set of type T
			</summary>
			<typeparam name="T">return type</typeparam>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.QueryAsync``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Asynchronously executes a single result set query and returns a result set of type T
			</summary>
			<typeparam name="T">return type</typeparam>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.Execute(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Executes a query without a result set and returns the number of rows affected
			</summary>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.ExecuteAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Executes a query without a result set asynchronously and returns the number of rows affected
			</summary>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.ExecuteScalar``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Executes a query without a result set and returns data of the specified type
			</summary>
			<typeparam name="T">return type</typeparam>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.ExecuteScalarAsync``1(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Asynchronously executes a query without a result set and returns data of the specified type
			</summary>
			<typeparam name="T">return type</typeparam>
			<param name="sql">sql command</param>
			<param name="parameter">parameter</param>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.Open">
			<summary>
				Open database connection
			</summary>
		</member>
		<member name="M:Dapper.IDbContext.OpenAsync">
			<summary>
				Open database connection asynchronously
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbContext.RollbackTransaction">
			<summary>
				Roll back the current transaction session
			</summary>
		</member>
		<member name="T:Dapper.DbContext">
			<summary>
				database context
			</summary>
		</member>
		<member name="T:Dapper.Logging">
			<summary>
				sql execution log
			</summary>
			<param name="message"></param>
			<param name="parameters"></param>
			<param name="commandTimeout"></param>
			<param name="commandType"></param>
		</member>
		<member name="P:Dapper.DbContextBuilder.Connection">
			<summary>
				Set up the database connection to be hosted
			</summary>
		</member>
		<member name="P:Dapper.DbContextBuilder.DbContextType">
			<summary>
				set database type
			</summary>
		</member>
		<member name="T:Dapper.IDbMultipleResult">
			<summary>
				DataReader multiple result sets
			</summary>
		</member>
		<member name="M:Dapper.IDbMultipleResult.GetList">
			<summary>
				Returns the current dynamic classtype result set
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMultipleResult.GetListAsync">
			<summary>
				Asynchronously returns the current dynamic type result set
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMultipleResult.GetList``1">
			<summary>
				Returns the current T result set
			</summary>
			<typeparam name="T">Result set type</typeparam>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMultipleResult.GetListAsync``1">
			<summary>
				Asynchronously returns the current T type result set
			</summary>
			<typeparam name="T"></typeparam>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMultipleResult.Get">
			<summary>
				Returns the current dynamic type result
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMultipleResult.GetAsync">
			<summary>
				Asynchronously returns the current dynamic type result
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMultipleResult.Get``1">
			<summary>
				Returns the current T type result
			</summary>
			<typeparam name="T">Result set type</typeparam>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMultipleResult.GetAsync``1">
			<summary>
				Asynchronously returns the current T type result
			</summary>
			<typeparam name="T">Result set type</typeparam>
			<returns></returns>
		</member>
		<member name="T:Dapper.Expressions.DbUpdateConcurrencyException">
			<summary>
				Concurrency conflict when modifying data
			</summary>
		</member>
		<member name="T:Dapper.Expressions.ExpressionActivator">
			<summary>
				expression tree generator
			</summary>
		</member>
		<member name="M:Dapper.Expressions.ExpressionResolve.VisitConstantValue(System.Linq.Expressions.Expression)">
			<summary>
				Parse expression arguments
			</summary>
			<param name="expression"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Expressions.ExpressionResolve.GetColumnName(System.Type,System.String)">
			<summary>
				get field name
			</summary>
			<param name="type"></param>
			<param name="csharpName"></param>
			<returns></returns>
		</member>
		<member name="T:Dapper.GlobalSettings">
			<summary>
				Global Settings
			</summary>
		</member>
		<member name="P:Dapper.GlobalSettings.DbMetaInfoProvider">
			<summary>
				Database metadata provider
			</summary>
		</member>
		<member name="P:Dapper.GlobalSettings.EntityMapperProvider">
			<summary>
				Entity Mapper Provider
			</summary>
		</member>
		<member name="P:Dapper.GlobalSettings.XmlCommandsProvider">
			<summary>
				xml command configuration
			</summary>
		</member>
		<member name="T:Dapper.IDbMetaInfoProvider">
			<summary>
				Database metadata provider
			</summary>
		</member>
		<member name="M:Dapper.IDbMetaInfoProvider.GetTable(System.Type)">
			<summary>
				Get meta information for a table
			</summary>
			<param name="type"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbMetaInfoProvider.GetColumns(System.Type)">
			<summary>
				Get the meta information of a field
			</summary>
			<param name="type"></param>
			<returns></returns>
		</member>
		<member name="T:Dapper.AnnotationDbMetaInfoProvider">
			<summary>
				Annotation Scheme Database Meta Information
			</summary>
		</member>
		<member name="T:Dapper.DbTableMetaInfo">
			<summary>
				table information
			</summary>
		</member>
		<member name="P:Dapper.DbTableMetaInfo.TableName">
			<summary>
				database table name
			</summary>
		</member>
		<member name="P:Dapper.DbTableMetaInfo.CsharpName">
			<summary>
				Csharp table name
			</summary>
		</member>
		<member name="T:Dapper.DbColumnMetaInfo">
			<summary>
				Field information
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.IsConcurrencyCheck">
			<summary>
				Whether to check concurrently
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.IsDefault">
			<summary>
				Whether the default value constraint
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.IsNotMapped">
			<summary>
				Is it a database field
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.ColumnName">
			<summary>
				database field name
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.CsharpName">
			<summary>
				Csharp field name
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.CsharpType">
			<summary>
				Csharp type
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.IsPrimaryKey">
			<summary>
				primary key constraint
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.IsIdentity">
			<summary>
				Whether it is an auto-incrementing column
			</summary>
		</member>
		<member name="P:Dapper.DbColumnMetaInfo.IsComplexType">
			<summary>
				Is it a computed column
			</summary>
		</member>
		<member name="T:Dapper.IEntityMapperProvider">
			<summary>
				Entity Conversion Mapper
			</summary>
		</member>
		<member name="M:Dapper.IEntityMapperProvider.GetSerializer``1(System.Data.IDataRecord)">
			<summary>
				Get entity serializer converter
			</summary>
			<typeparam name="T"></typeparam>
			<param name="record"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IEntityMapperProvider.GetSerializer">
			<summary>
				Get dynamic entity serialization converter
			</summary>
			<returns></returns>
		</member>
		<member name="M:Dapper.IEntityMapperProvider.GetDeserializer(System.Type)">
			<summary>
				Get parameter decoder
			</summary>
			<param name="type"></param>
			<returns></returns>
		</member>
		<member name="T:Dapper.EntityMapperProvider">
			<summary>
				Default entity mapper
			</summary>
		</member>
		<member name="M:Dapper.EntityMapperProvider.GetSerializer``1(System.Data.IDataRecord)">
			<summary>
				get entity mapper
			</summary>
		</member>
		<member name="M:Dapper.EntityMapperProvider.GetSerializer">
			<summary>
				Get dynamic mapper
			</summary>
		</member>
		<member name="M:Dapper.EntityMapperProvider.GetDeserializer(System.Type)">
			<summary>
				get entity destructor
			</summary>
		</member>
		<member name="M:Dapper.EntityMapperProvider.CreateTypeDeserializerHandler(System.Type)">
			<summary>
				Create dynamic methods
			</summary>
			<param name="type"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.EntityMapperProvider.CreateTypeSerializerHandler``1(Dapper.MemberMapper,System.Data.IDataRecord)">
			<summary>
				Create dynamic methods
			</summary>
			<typeparam name="T"></typeparam>
			<param name="mapper"></param>
			<param name="record"></param>
			<returns></returns>
		</member>
		<member name="T:Dapper.DataReaderCellInfo">
			<summary>
				Row information in DataReader
			</summary>
		</member>
		<member name="T:Dapper.MemberMapper">
			<summary>
				A strategy that returns data logging to Csharp type
			</summary>
		</member>
		<member name="M:Dapper.MemberMapper.FindConstructor(System.Type)">
			<summary>
				Find parametric constructors.
				If there is no default constructor, the constructor with the most parameters is returned.
			</summary>
		</member>
		<member name="M:Dapper.MemberMapper.FindConstructorParameter(Dapper.DataReaderCellInfo[],System.Reflection.ParameterInfo)">
			<summary>
				Returns field information based on parameter information
			</summary>
		</member>
		<member name="M:Dapper.MemberMapper.FindMember(System.Reflection.MemberInfo[],Dapper.DataReaderCellInfo)">
			<summary>
				Returns attribute information based on field information
			</summary>
		</member>
		<member name="M:Dapper.MemberMapper.FindConvertMethod(System.Type,System.Type)">
			<summary>
				Return type conversion function.
			</summary>
		</member>
		<member name="T:Dapper.MemberMapper.MemberMapperMethod">
			<summary>
				Database type to Csharp type converter
			</summary>
		</member>
		<member name="T:Dapper.IXmlCommandsProvider">
			<summary>
				xml configuration provider
			</summary>
		</member>
		<member name="M:Dapper.IXmlCommandsProvider.Build``1(System.String,``0)">
			<summary>
				Parse dynamic sql
			</summary>
			<typeparam name="T"></typeparam>
			<param name="id"></param>
			<param name="parameter"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlCommandsProvider.Build(System.String)">
			<summary>
				Parse sql
			</summary>
			<param name="id"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlCommandsProvider.Load(System.String)">
			<summary>
				load configuration file
			</summary>
			<param name="filename">filename</param>
		</member>
		<member name="M:Dapper.IXmlCommandsProvider.Load(System.String,System.String)">
			<summary>
				Load all matching files from the specified path
			</summary>
			<param name="path">path</param>
			<param name="pattern">File wildcard</param>
		</member>
		<member name="M:Dapper.IXmlCommandsProvider.Load(System.String,System.String,System.IO.SearchOption)">
			<summary>
				Load all matching files from the specified path
			</summary>
			<param name="path">path</param>
			<param name="pattern">File wildcard</param>
			<param name="options">Find options</param>
		</member>
		<member name="M:Dapper.IXmlCommandsProvider.Load(System.Reflection.Assembly)">
			<summary>
				Load configuration all xml from assembly
			</summary>
			<param name="assembly">assembly</param>
		</member>
		<member name="M:Dapper.IXmlCommandsProvider.Load(System.Reflection.Assembly,System.String)">
			<summary>
				Load configuration from assembly
			</summary>
			<param name="assembly">assembly</param>
			<param name="pattern">Regular match</param>
		</member>
		<member name="T:Dapper.XmlCommandsProvider">
			<summary>
				xml configuration provider
			</summary>
		</member>
		<member name="M:Dapper.XmlCommandsProvider.Load(System.String)">
			<summary>
				load configuration file
			</summary>
			<param name="filename"></param>
		</member>
		<member name="M:Dapper.XmlCommandsProvider.Load(System.IO.Stream)">
			<summary>
				load xml from stream
			</summary>
			<param name="stream"></param>
		</member>
		<member name="M:Dapper.XmlCommandsProvider.Load(System.String,System.String)">
			<summary>
				Load all matching files from the specified path
			</summary>
			<param name="path">path</param>
			<param name="pattern">wildcard</param>
		</member>
		<member name="M:Dapper.XmlCommandsProvider.Load(System.String,System.String,System.IO.SearchOption)">
			<summary>
				Load all matching files from the specified path
			</summary>
			<param name="path">path</param>
			<param name="pattern">wildcard</param>
			<param name="options">Find options</param>
		</member>
		<member name="M:Dapper.XmlCommandsProvider.Load(System.Reflection.Assembly)">
			<summary>
				Load files ending in .xml from embedded resources
			</summary>
			<param name="assembly">assembly</param>
		</member>
		<member name="M:Dapper.XmlCommandsProvider.Load(System.Reflection.Assembly,System.String)">
			<summary>
				Load configuration from embedded resource
			</summary>
			<param name="assembly">assembly</param>
			<param name="pattern">match pattern</param>
		</member>
		<member name="T:Dapper.DbQuery`1">
			<summary>
				Asynchronous linq query
			</summary>
			<summary>
				Synchronous linq query
			</summary>
			<typeparam name="T"></typeparam>
		</member>
		<member name="T:Dapper.IDbQuery`1">
			<summary>
				linq query
			</summary>
			<typeparam name="T"></typeparam>
		</member>
		<member name="M:Dapper.IDbQuery`1.Get(System.Object)">
			<summary>
				Retrieve data by primary key
			</summary>
			<param name="id"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.GetAsync(System.Object)">
			<summary>
				Retrieve data by primary key asynchronously
			</summary>
			<param name="id"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Count(System.Nullable{System.Int32})">
			<summary>
				count query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.CountAsync(System.Nullable{System.Int32})">
			<summary>
				Asynchronous count query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Count``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				count query
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="expression">Field List</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.CountAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				Asynchronous count query
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="expression">Field List</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Delete(System.Nullable{System.Int32})">
			<summary>
				delete query
			</summary>
			<param name="commandTimeout"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.DeleteAsync(System.Nullable{System.Int32})">
			<summary>
				Asynchronous delete query
			</summary>
			<param name="commandTimeout"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				delete query
			</summary>
			<param name="expression">query condition</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				Asynchronous delete query
			</summary>
			<param name="expression">query condition</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Exists(System.Nullable{System.Int32})">
			<summary>
				exists query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.ExistsAsync(System.Nullable{System.Int32})">
			<summary>
				Asynchronous exists query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				exists query
			</summary>
			<param name="expression">query condition</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
			<summary>
				Asynchronous exists query
			</summary>
			<param name="expression">query condition</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Update(System.Nullable{System.Int32})">
			<summary>
				update query, if no where is specified, apply to all records
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.UpdateAsync(System.Nullable{System.Int32})">
			<summary>
				Asynchronous update query, if no where is specified, apply to all records
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Update(`0)">
			<summary>
				The update query is updated according to the Primarkey by default. If there is a where, only the specified update condition is used.
				The primary key field and primary key field cannot be updated through this interface
			</summary>
			<param name="entity">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.UpdateAsync(`0)">
			<summary>
				Asynchronous update query, which is updated according to Primarkey by default. If there is where, only the specified update condition is used.
				The primary key field and primary key field cannot be updated through this interface
			</summary>
			<param name="entity">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Insert(`0)">
			<summary>
				insert query, this interface will ignore the identity field
			</summary>
			<param name="entity">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.InsertAsync(`0)">
			<summary>
				Asynchronous insert query, this interface ignores the identity field
			</summary>
			<param name="entity">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.InsertReturnId(`0)">
			<summary>
				insert query, and return id, the interface will ignore the identity field
			</summary>
			<param name="entity">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.InsertReturnIdAsync(`0)">
			<summary>
				Asynchronous insert query and return id, this interface ignores the identity field
			</summary>
			<param name="entity"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Insert(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
			<summary>
				Batch insert query, this interface will ignore the identity field
			</summary>
			<param name="entitys">Parameter collection</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.InsertAsync(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32})">
			<summary>
				Asynchronous batch insert query, this interface will ignore the identity field
			</summary>
			<param name="entitys"></param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Select(System.Nullable{System.Int32})">
			<summary>
				select query
			</summary>
			<param name="commandTimeout">timeout time</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SelectAsync(System.Nullable{System.Int32})">
			<summary>
				Asynchronous select query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SelectMany(System.Nullable{System.Int32})">
			<summary>
				Paging select query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns>Result set, total records</returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SelectManyAsync(System.Nullable{System.Int32})">
			<summary>
				Asynchronous paging select query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				select query
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SelectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				Asynchronous select query
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SelectMany``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				Paging select query
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SelectManyAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				Asynchronous paging select query
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Single(System.Nullable{System.Int32})">
			<summary>
				select query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SingleAsync(System.Nullable{System.Int32})">
			<summary>
				Asynchronous select query
			</summary>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Single``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				select query
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SingleAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				Asynchronous select query
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Filter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				Filter fields when insert, update, select
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="expression">Field List</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
			<summary>
				set query
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<param name="condition">Validity</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func {`0,``0}},System.Boolean)">
			<summary>
				set query
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="column">field</param>
			<param name="expression">expression</param>
			<param name="condition">Validity</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Take(System.Int32,System.Boolean)">
			<summary>
				take query, get count records from the row with subscript 0
			</summary>
			<param name="count">Number of records</param>
			<param name="condition">condition</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Skip(System.Int32,System.Int32,System.Boolean)">
			<summary>
				skip, get count records from the row with index index
			</summary>
			<param name="index">Start index</param>
			<param name="count">Number of records</param>
			<param name="condition">condition</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Page(System.Int32,System.Int32,System.Boolean)">
			<summary>
				page query, get count records from the row whose subscript is (index-1)*count
			</summary>
			<param name="index">Starting page number</param>
			<param name="count">Number of records</param>
			<param name="condition">condition</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.With(System.String)">
			<summary>
				Specify read lock
			</summary>
			<param name="lockname"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
			<summary>
				where query, multiple where effectively use and join
			</summary>
			<param name="expression">expression</param>
			<param name="condition">Validity</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
			<summary>
				having query, multiple having queries effectively use and join
			</summary>
			<param name="expression">expression</param>
			<param name="condition">Validity</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.GroupBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				group query
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="expression">Field List</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				orderby query, ascending order
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="expression">Field List</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
			<summary>
				orderby query, descending
			</summary>
			<typeparam name="TResult">Type Inference</typeparam>
			<param name="expression">Field List</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				sum
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IDbQuery`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32})">
			<summary>
				Asynchronous summation
			</summary>
			<typeparam name="TResult">return type</typeparam>
			<param name="expression">Field List</param>
			<param name="commandTimeout">Timeout</param>
			<returns></returns>
		</member>
		<member name="T:Dapper.Operator">
			<summary>
				database operator
			</summary>
		</member>
		<member name="M:Dapper.Operator.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
			<summary>
				in
			</summary>
			<typeparam name="T">Type Inference</typeparam>
			<param name="column">field</param>
			<param name="values">parameters</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.In``1(``0,``0[])">
			<summary>
				in (low performance)
			</summary>
			<typeparam name="T">Type Inference</typeparam>
			<param name="column">field</param>
			<param name="values">parameters</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
			<summary>
				not in
			</summary>
			<typeparam name="T">Type Inference</typeparam>
			<param name="column">field</param>
			<param name="values">parameters</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.NotIn``1(``0,``0[])">
			<summary>
				not in (low performance)
			</summary>
			<typeparam name="T">Type Inference</typeparam>
			<param name="column">field</param>
			<param name="values">parameters</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.Contains(System.String,System.String)">
			<summary>
				like %value%
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.NotContains(System.String,System.String)">
			<summary>
				not like %value%
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.StartsWith(System.String,System.String)">
			<summary>
				like value%
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.NotStartsWith(System.String,System.String)">
			<summary>
				not like value%
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.EndsWith(System.String,System.String)">
			<summary>
				like %value
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.NotEndsWith(System.String,System.String)">
			<summary>
				not like %value
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.Regexp(System.String,System.String)">
			<summary>
				regex value
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.NotRegexp(System.String,System.String)">
			<summary>
				not regex value
			</summary>
			<param name="column">field</param>
			<param name="value">parameter</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.ResolveExpressionType(System.Linq.Expressions.ExpressionType)">
			<summary>
				Analytical expression
			</summary>
			<param name="type"></param>
			<returns></returns>
		</member>
		<member name="M:Dapper.Operator.ResolveExpressionType(System.String)">
			<summary>
				Analytical expression
			</summary>
			<param name="type"></param>
			<returns></returns>
		</member>
		<member name="T:Dapper.IXmlQuery">
			<summary>
				xml command mapper
			</summary>
		</member>
		<member name="M:Dapper.IXmlQuery.MultipleQuery(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Execute a multi-result set query and return IMultiResult
			</summary>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.Query(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Execute a single result set query and return a result set of dynamic type
			</summary>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.QueryAsync(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Asynchronously executes a single result set query and returns a result set of dynamic type
			</summary>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.Query``1(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Execute a single result set query and return a result set of type T
			</summary>
			<typeparam name="T">return type</typeparam>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.QueryAsync``1(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Asynchronously executes a single result set query and returns a result set of type T
			</summary>
			<typeparam name="T">return type</typeparam>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.Execute(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Executes a query without a result set and returns the number of rows affected
			</summary>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.ExecuteAsync(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Executes a query without a result set asynchronously and returns the number of rows affected
			</summary>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.ExecuteScalar``1(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Executes a query without a result set and returns data of the specified type
			</summary>
			<typeparam name="T">return type</typeparam>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.ExecuteScalarAsync``1(System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
			<summary>
				Asynchronously executes a query without a result set and returns data of the specified type
			</summary>
			<typeparam name="T"></typeparam>
			<param name="commandTimeout">Timeout</param>
			<param name="commandType">Command Type</param>
			<returns></returns>
		</member>
		<member name="M:Dapper.IXmlQuery.AddDbParameter(System.String,System.Object)">
			<summary>
				Add database parameters
			</summary>
			<param name="name"></param>
			<param name="value"></param>
		</member>
		<member name="T:Dapper.XmlQuery">
			<summary>
				Implement the xml command mapper
			</summary>
		</member>
	</members>
</doc>